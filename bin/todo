#!/usr/bin/env node

var TodoContainer = require("../lib");
var Table = require('tty-table');
var chalk = require('chalk');

function display(arr) {
    if (!arr.length) {
        return console.log(chalk.red("No todos."));
    }

    var data = [], i, c;
    for (i = 0; i < arr.length; ++i) {
        c = arr[i];
        data.push([c.id + 1, c.todo, c.date, c.state]);
    }

    var header = [{
        value: chalk.bold("Id"),
        width: 4
    }, {
        value: chalk.bold("Todo"),
        width: 60,
        align: "left",
    }, {
        value: chalk.bold("Date"),
        align: "left",
        paddingLeft: 2,
        width: 23,
        formatter: function (value) {
            return value;
        }
    }, {
        value: chalk.bold("Status"),
        align: "left",
        width: 10,
        formatter: function (value) {
            if (value === 'OPEN') {
               return chalk.green(value);
            }

            return chalk.red(value);
        }
    }];

    var table = Table(header, data, {
        borderStyle: 0,
        paddingBottom: 0,
        align: "center",
        color: "white",
        headerColor: "cyan",
        headerAlign: 'left',
        borderColor: "grey",
    });

    console.log(table.render());
}

var todo = new TodoContainer(function (err) {
    if (err) {
        return console.log(err);
    }

    var getTodoArgument = function (processArguments) {
        var argument = processArguments.length > 3 ? processArguments[3] : null;

        processArguments.forEach(function (segment, index) {
            if (index > 3) {
                argument += segment;
            }
        });

        return argument;
    };

    var commands = {
        create: function () {
            if (process.argv[3]) {
                todo.create(process.argv[3]);
                todo.save();
            } else {
                console.log(chalk.red("Todo can't be empty! Ex: todo create \"This is my todo\" "));
            }
        },
        list: function (callback) {
            todo.filter({}, callback);
        },
        opened: function (callback) {
            var filter = {
                "state": "OPEN"
            };
            todo.filter(filter, callback);
        },
        closed: function (callback) {
            var filter = JSON.parse("{ \"state\": \"CLOSED\" }");
            todo.filter(filter, callback);
        },
        reopen: function () {
            var todos = getTodoArgument(process.argv);
            if (todos == 'all') {
                todo.reopenAll();
            } else if (parseInt(todos, 10)) {
                todo.reopen(todos);
            } else {
                console.log(chalk.red('Pass in a todo id'));
            }

            todo.save();
        },
        help: function () {
            console.log(require("../help.js"));
        },
        close: function () {
            var todos = getTodoArgument(process.argv);

            if (todos == 'all') {
                todo.closeAll();
            } else if (parseInt(todos, 10)) {
                todo.close(todos);
            } else {
                console.log(chalk.red('Pass in a todo id'));
            }

            todo.save();
        },
        clear: function () {
            todo.clear();
        }
    };

    if (!commands[process.argv[2]]) {
        process.argv[2] = "opened";
    }

    commands[process.argv[2]](function (err, res) {
        if (err) {
            return console.log(err);
        }

        if (typeof res === "string") {
            return console.log(res);
        }

        display(res);
    });
});
